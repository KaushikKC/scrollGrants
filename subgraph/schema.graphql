type Round @entity {
  id: ID! # Unique identifier for the round
  owner: Bytes! # Address of the owner
  metadata: String! # Round metadata
  matchingAmount: BigInt! # Matching amount for the round
  projects: [Project!]! @derivedFrom(field: "round") # List of projects associated with this round
  isActive: Boolean! # Whether the round is active or not
  totalDistributed: BigInt! # Total amount distributed in the round
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  #Add ! to the fields that are required
  roundName: String
  startDate: String
  endDate: String
  roundDescription: String
}

type Project @entity {
  id: ID! # Unique identifier for the project
  round: Round! # Relation to the associated round
  owner: Bytes! # Address of the project owner
  metadata: String! # Project metadata
  totalDonations: BigInt! # Total amount of donations
  pendingPayout: BigInt! # Pending payout amount
  donors: [Bytes!]! # List of donors
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!

  projectName: String
  osoName: String
  website: String
  twitterUrl: String
  logoUrl: String
  coverUrl: String
  fundingSources: String
  teamSize: String
  projectDescription: String
}

type BalanceToppedUp @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectApplied @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  projectId: BigInt! # uint256
  owner: Bytes! # address
  metadata: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectDonated @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  projectId: BigInt! # uint256
  donor: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProjectFundsWithdrawn @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  projectId: BigInt! # uint256
  owner: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoundCreated @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  owner: Bytes! # address
  metadata: String! # string
  matchingAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoundDeactivated @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  owner: Bytes! # address
  totalDistributed: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoundEdited @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  newMetadata: String! # string
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
